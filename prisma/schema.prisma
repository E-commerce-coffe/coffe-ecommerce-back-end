generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model detalle_factura {
  id_lote           Int
  id_factura        Int
  unidades_producto Int
  sub_total_precio  Float   @db.Float
  factura           factura @relation(fields: [id_factura], references: [id_factura], onUpdate: Restrict, map: "fk_relation_relations_factura")
  lote              lote    @relation(fields: [id_lote], references: [id_lote], onUpdate: Restrict, map: "fk_relation_relations_lote")

  @@id([id_lote, id_factura])
  @@index([id_factura], map: "fk_relation_relations_factura")
}

model factura {
  id_factura      Int               @id @default(autoincrement())
  id_persona      Int
  valor_total     Float             @db.Float
  fecha_factura   DateTime          @db.DateTime(0)
  detalle_factura detalle_factura[]
  personas        personas          @relation(fields: [id_persona], references: [id_persona], onUpdate: Restrict, map: "fk_factura_factura_f_personas")

  @@index([id_persona], map: "fk_factura_factura_f_personas")
}

model lote {
  id_lote             Int               @id @default(autoincrement())
  id_producto         Int
  valor_lote_producto Float             @db.Float
  stock               Int
  detalle_factura     detalle_factura[]
  productos           productos         @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade, onUpdate: Cascade, map: "fk_lote_relations_producto")

  @@index([id_producto], map: "fk_lote_relations_producto")
}

model personas {
  id_persona                             Int        @id @default(autoincrement())
  nombre_usuario                         String     @db.Char(30)
  apellido_usuario                       String     @db.Char(30)
  documento_usuario                         Int
  tipo_documento                         String     @db.Char(2)
  correo_usuario                         String     @db.Char(40) @unique
  tipo_usuario                           String     @db.Char(1)
  token_password                         String?    @db.Char(200)
  credenciales                           credenciales?
  factura                                factura[]
  ventas                                 ventas[]

}

model credenciales {
  id_credencial    Int        @id @default(autoincrement())
  nombre_usuario   String     @db.Char(40) @unique // Campo Ãºnico
  contrasena_usuario String   @db.Char(60)
  personas         personas   @relation(fields: [nombre_usuario], references: [correo_usuario], onDelete: Cascade, map: "credenciales_ibfk_1")
}

model productos {
  id_producto     Int     @id @default(autoincrement())
  nombre_producto String  @db.Char(30)
  descripcion     String  @db.Char(90)
  categoria       String  @db.Char(20)
  path_imagen     String? @db.Char(200)
  estado          String  @db.Char(1)
  lote            lote[]

   @@index([id_producto], map: "fk_lote_relations_producto")
}

model ventas {
  id_venta         Int                @default(autoincrement())
  id_persona       Int
  fecha_venta      DateTime           @db.DateTime(0)
  valor_venta      Float              @db.Float
  estado_venta     String             @db.Char(1)
  comprobante_pago String             @db.Char(200)
  personas         personas           @relation(fields: [id_persona], references: [id_persona], onUpdate: Restrict, map: "fk_ventas_ventas_fk_personas")
  ventas_productos ventas_productos[]

  @@id([id_venta, id_persona])
  @@index([id_persona], map: "fk_ventas_ventas_fk_personas")
}

model ventas_productos {
  id_producto           Int
  id_venta              Int
  id_persona            Int
  precio_producto_venta Int
  cantidad_producto     Int
  ventas                ventas @relation(fields: [id_venta, id_persona], references: [id_venta, id_persona], onUpdate: Restrict, map: "fk_ventas_p_ventapro__ventas")

  @@id([id_producto, id_venta, id_persona])
  @@index([id_venta, id_persona], map: "fk_ventas_p_ventapro__ventas")
}

